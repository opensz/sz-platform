<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "hcolumnsttp://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="org.sz.platform.system.model.Resources">
	<resultMap id="Resources" type="org.sz.platform.system.model.Resources">
		<id property="resId" column="resId" jdbcType="NUMERIC"/>
		<result property="resName" column="resName" jdbcType="VARCHAR"/>
		<result property="alias" column="alias" jdbcType="VARCHAR"/>
		<result property="sn" column="sn" jdbcType="NUMERIC"/>
		<result property="icon" column="icon" jdbcType="VARCHAR"/>
		<result property="parentId" column="parentId" jdbcType="NUMERIC"/>
		<result property="defaultUrl" column="defaultUrl" jdbcType="VARCHAR"/>
		<result property="isFolder" column="isFolder" jdbcType="NUMERIC"/>
		<result property="isDisplayInMenu" column="isDisplayInMenu" jdbcType="NUMERIC"/>
		<result property="isOpen" column="isOpen" jdbcType="NUMERIC"/>
		<result property="systemId" column="systemId" jdbcType="NUMERIC"/>
		
		<result property="param" column="param" jdbcType="VARCHAR"/>
	</resultMap>
	
	<sql id="columns">
		resId,resName,alias,sn,icon,parentId,defaultUrl,isFolder,isDisplayInMenu,isOpen,systemId,param
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(resId)"> AND resId  =#{resId} </if>
			<if test="@Ognl@isNotEmpty(resName)"> AND resName  LIKE '%${resName}%'  </if>
			<if test="@Ognl@isNotEmpty(alias)"> AND alias  LIKE '%${alias}%'  </if>
			<if test="@Ognl@isNotEmpty(sn)"> AND sn  =#{sn} </if>
			<if test="@Ognl@isNotEmpty(icon)"> AND icon  LIKE '%${icon}%'  </if>
			<if test="@Ognl@isNotEmpty(parentId)"> AND parentId  =#{parentId} </if>
			<if test="@Ognl@isNotEmpty(defaultUrl)"> AND defaultUrl  LIKE '%${defaultUrl}%'  </if>
			<if test="@Ognl@isNotEmpty(isFolder)"> AND isFolder  =#{isFolder} </if>
			<if test="@Ognl@isNotEmpty(isDisplayInMenu)"> AND isDisplayInMenu  =#{isDisplayInMenu} </if>
			<if test="@Ognl@isNotEmpty(isOpen)"> AND isOpen  =#{isOpen} </if>
			<if test="@Ognl@isNotEmpty(systemId)"> AND systemId  =#{systemId} </if>
			<if test="@Ognl@isNotEmpty(param)"> AND param  =#{param} </if>
		</where>
	</sql>

	<insert id="add" parameterType="org.sz.platform.system.model.Resources">
		INSERT INTO sys_res
		(<include refid="columns"/>)
		VALUES
		(#{resId,jdbcType=NUMERIC}, #{resName,jdbcType=VARCHAR}, #{alias,jdbcType=VARCHAR}, #{sn,jdbcType=NUMERIC}, #{icon,jdbcType=VARCHAR}, #{parentId,jdbcType=NUMERIC}, #{defaultUrl,jdbcType=VARCHAR}, #{isFolder,jdbcType=NUMERIC}, #{isDisplayInMenu,jdbcType=NUMERIC}, #{isOpen,jdbcType=NUMERIC}, #{systemId,jdbcType=NUMERIC}, #{param,jdbcType=VARCHAR})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM SYS_RES 
		WHERE
		resId=#{resId}
	</delete>
	
	<update id="update" parameterType="org.sz.platform.system.model.Resources">
			UPDATE sys_res SET
			resName=#{resName,jdbcType=VARCHAR} , 
			alias=#{alias,jdbcType=VARCHAR} , 
			sn=#{sn,jdbcType=NUMERIC} , 
			icon=#{icon,jdbcType=VARCHAR} , 
			parentId=#{parentId,jdbcType=NUMERIC} , 
			defaultUrl=#{defaultUrl,jdbcType=VARCHAR} , 
			isFolder=#{isFolder,jdbcType=NUMERIC} , 
			isDisplayInMenu=#{isDisplayInMenu,jdbcType=NUMERIC} , 
			isOpen=#{isOpen,jdbcType=NUMERIC} , 
			systemId=#{systemId,jdbcType=NUMERIC}, 
			param=#{param,jdbcType=VARCHAR}
			WHERE
			resId=#{resId}
	</update>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="Resources">
		SELECT <include refid="columns"/>
		FROM SYS_RES
		WHERE
		resId=#{resId}
	</select>
	
	<select id="getAll" resultMap="Resources">
		SELECT <include refid="columns"/>
		FROM SYS_RES   
		<include refid="dynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		ORDER BY sn,resid
		</if>
	</select>
	
	<select id="getByParentId" parameterType="java.lang.Long" resultMap="Resources">
		SELECT <include refid="columns"/> FROM SYS_RES WHERE  parentId=#{parentId} ORDER BY sn,resid
	</select>
	
	<select id="getBySystemId" parameterType="java.lang.Long" resultMap="Resources">
		SELECT <include refid="columns"/>
		FROM SYS_RES WHERE  systemId=#{systemId}
		ORDER BY sn,resid
	</select>
	
	
	<select id="getNormMenu" parameterType="java.util.Map" resultMap="Resources">
		SELECT DISTINCT res.resId,res.resName,res.alias,res.sn,res.icon,res.parentId,res.defaultUrl,
		res.isFolder,res.isDisplayInMenu,res.isOpen,res.systemId,res.param
		FROM 
		SYS_ROLE_RES role_res,
		SYS_USER_ROLE user_role,
		SYS_RES res
		WHERE user_role.userId=#{userId}  	AND role_res.roleId=user_role.roleId
       	AND role_res.resId=res.resId AND res.systemId=#{systemId}
       	AND res.isDisplayInMenu=1
		ORDER BY sn
		
	</select>
	<select id="getSuperMenu" parameterType="Long" resultMap="Resources">
		SELECT <include refid="columns"/>
		FROM SYS_RES
		WHERE systemId=#{systemId}  	AND isDisplayInMenu=1 	ORDER BY sn
	</select>
	
	
	
	<select id="getDefaultUrlAndRoleBySystemId" parameterType="java.lang.Long" resultType="org.sz.platform.system.model.ResourcesUrlExt">
		SELECT DISTINCT A.defaultUrl url ,C.alias AS role
		FROM
		SYS_RES A
		LEFT JOIN SYS_ROLE_RES B ON (A.resId=B.resId)
		LEFT JOIN SYS_ROLE C ON (B.roleId=C.roleId)
		WHERE A.systemId=#{systemId} and A.defaultUrl is not null
	</select>
	
	<select id="getSubSystemResources" parameterType="java.lang.Long" resultType="org.sz.platform.system.model.ResourcesUrlExt">
		SELECT DISTINCT A.defaultUrl url , C.alias AS role
		FROM
		SYS_RES A
		LEFT JOIN SYS_ROLE_RES B ON (A.resId=B.resId)
		LEFT JOIN SYS_ROLE C ON (B.roleId=C.roleId)
		LEFT JOIN SYS_SUBSYSTEM D ON (A.systemId=D.systemId)
		WHERE  D.defaultUrl=#{defaultUrl} and A.defaultUrl is not null
	</select>
	
	<select id="getSubSystemResByAlias" parameterType="java.lang.String" resultType="org.sz.platform.system.model.ResourcesUrlExt">
		SELECT DISTINCT A.defaultUrl url , C.alias AS role
		FROM
		SYS_RES A
		LEFT JOIN SYS_ROLE_RES B ON (A.resId=B.resId)
		LEFT JOIN SYS_ROLE C ON (B.roleId=C.roleId)
		LEFT JOIN SYS_SUBSYSTEM D ON (A.systemId=D.systemId)
		WHERE  D.Alias=#{alias} and A.defaultUrl is not null
	</select>
	
	
	<select id="getFunctionAndRoleBySystemId" parameterType="java.lang.Long" resultType="org.sz.platform.system.model.ResourcesUrlExt">
		 SELECT DISTINCT C.alias AS role,A.alias AS function
			FROM SYS_RES A
			Left outer join  
			SYS_ROLE_RES B
			on A.resId=B.resId
			left outer join SYS_ROLE C
			on B.roleId=C.roleId
		    where A.systemId=#{systemId}
	</select>


	<select id="getSubSystemFunction" parameterType="java.lang.String" resultType="org.sz.platform.system.model.ResourcesUrlExt">
		SELECT DISTINCT SYS_ROLE.alias AS role,SYS_RES.alias AS function
		FROM
		SYS_RES
		LEFT JOIN SYS_ROLE_RES ON (SYS_ROLE_RES.resId=SYS_RES.resId)
		LEFT JOIN SYS_ROLE ON (SYS_ROLE.roleId=SYS_ROLE_RES.roleId)
		LEFT JOIN SYS_SUBSYSTEM ON (SYS_RES.systemId=SYS_SUBSYSTEM.systemId)
		WHERE  SYS_SUBSYSTEM.defaultUrl=#{defaultUrl}
	</select>
	
	<select id="getSubSystemsFuncByAlias" parameterType="java.lang.String" resultType="org.sz.platform.system.model.ResourcesUrlExt">
		SELECT DISTINCT SYS_ROLE.alias AS role,SYS_RES.alias AS function
		FROM
		SYS_RES
		LEFT JOIN SYS_ROLE_RES ON (SYS_ROLE_RES.resId=SYS_RES.resId)
		LEFT JOIN SYS_ROLE ON (SYS_ROLE.roleId=SYS_ROLE_RES.roleId)
		LEFT JOIN SYS_SUBSYSTEM ON (SYS_RES.systemId=SYS_SUBSYSTEM.systemId)
		WHERE  SYS_SUBSYSTEM.alias=#{alias}
	</select>
	
	<select id="isAliasExists" resultType="Integer">
		SELECT count(1) as count FROM SYS_RES WHERE systemId=#{systemId}  AND alias=#{alias}
	</select>
	
	<select id="isAliasExistsForUpd" resultType="Integer">
		SELECT count(1) as count FROM SYS_RES WHERE systemId=#{systemId}  AND alias=#{alias} and resId!=#{resId}
	</select>
		
	

	
	
</mapper>
