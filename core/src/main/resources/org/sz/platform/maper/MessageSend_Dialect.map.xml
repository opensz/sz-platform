<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="org.sz.platform.model.system.MessageSend">
	<resultMap id="MessageSend" type="org.sz.platform.model.system.MessageSend">
		<id property="id" column="id" jdbcType="NUMERIC"/>
		<result property="subject" column="subject" jdbcType="VARCHAR"/>
		<result property="userId" column="userId" jdbcType="NUMERIC"/>
		<result property="userName" column="userName" jdbcType="VARCHAR"/>
		<result property="messageType" column="messageType" jdbcType="VARCHAR"/>
		<result property="content" column="content" jdbcType="CLOB"/>
		<result property="sendTime" column="sendTime" jdbcType="TIMESTAMP"/>
		<result property="canReply" column="canReply" jdbcType="NUMERIC"/>
		<result property="receiverName" column="receiverName" jdbcType="CLOB"/>
	</resultMap>
	
	<sql id="columns">
		id,subject,userId,userName,messageType,content,sendTime,canReply,receiverName
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(id)"> AND id  =#{id} </if>
			<if test="@Ognl@isNotEmpty(subject)"> AND subject  LIKE '%${subject}%'  </if>
			<if test="@Ognl@isNotEmpty(userId)"> AND userId  =#{userId} </if>
			<if test="@Ognl@isNotEmpty(userName)"> AND userName  LIKE '%${userName}%'  </if>
			<if test="@Ognl@isNotEmpty(messageType)"> AND messageType  LIKE '%${messageType}%'  </if>
			<if test="@Ognl@isNotEmpty(content)"> AND content  LIKE '%${content}%'  </if>
			<if test="@Ognl@isNotEmpty(beginsendTime)"> and sendTime>=#{beginsendTime,jdbcType=TIMESTAMP}</if>
		    <if test="@Ognl@isNotEmpty(endsendTime)"> and sendTime &lt;=#{endsendTime,jdbcType=TIMESTAMP}</if>
			<if test="@Ognl@isNotEmpty(canReply)"> AND canReply  =#{canReply} </if>
			<if test="@Ognl@isNotEmpty(receiverName)"> AND receiverName  LIKE '%${receiverName}%'  </if>
		</where>
	</sql>

	<sql id="sendDynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(subject)"> AND subject  LIKE '%${subject}%'  </if>
			<if test="@Ognl@isNotEmpty(userId)"> AND userId  =#{userId} </if>
			<if test="@Ognl@isNotEmpty(messageType)"> AND messageType != #{messageType}  </if>
			<if test="@Ognl@isNotEmpty(beginsendTime)"> and sendTime>=#{beginsendTime,jdbcType=TIMESTAMP}</if>
		    <if test="@Ognl@isNotEmpty(endsendTime)"> and sendTime &lt;=#{endsendTime,jdbcType=TIMESTAMP}</if>
		</where>
	</sql>

	<insert id="add" parameterType="org.sz.platform.model.system.MessageSend">
		INSERT INTO sys_msg_send
		(<include refid="columns"/>)
		VALUES
		(#{id,jdbcType=NUMERIC}, #{subject,jdbcType=VARCHAR}, #{userId,jdbcType=NUMERIC}, #{userName,jdbcType=VARCHAR}, #{messageType,jdbcType=VARCHAR}, #{content,jdbcType=CLOB}, #{sendTime,jdbcType=TIMESTAMP}, #{canReply,jdbcType=NUMERIC}, #{receiverName,jdbcType=CLOB})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM SYS_MSG_SEND 
		WHERE
		id=#{id}
	</delete>
	
	<update id="update" parameterType="org.sz.platform.model.system.MessageSend">
		UPDATE sys_msg_send SET
		subject=#{subject,jdbcType=VARCHAR} , 
		userId=#{userId,jdbcType=NUMERIC} , 
		userName=#{userName,jdbcType=VARCHAR} , 
		messageType=#{messageType,jdbcType=VARCHAR} , 
		content=#{content,jdbcType=CLOB} , 
		sendTime=#{sendTime,jdbcType=TIMESTAMP} , 
		canReply=#{canReply,jdbcType=NUMERIC} , 
		receiverName=#{receiverName,jdbcType=CLOB} 
		WHERE
		id=#{id}
	</update>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="MessageSend">
		SELECT <include refid="columns"/>
		FROM SYS_MSG_SEND
		WHERE
		id=#{id}
	</select>
	
	<select id="getAll" resultMap="MessageSend">
		SELECT <include refid="columns"/>
		FROM SYS_MSG_SEND   
		<include refid="sendDynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by id  desc
		</if>
	</select>
	
    <select id="getReceiverByUser"  resultType="org.sz.platform.model.system.MessageSend">	
    	select d.id, d.subject, d.userId, d.userName, d.messageType, d.content, d.sendTime, d.canReply, d.receiverName,
	    b.receiveTime,b.id rid
	    from sys_msg_send d, sys_msg_read b 
	    where d.id in(select a.id from sys_msg_send a 
	    join sys_msg_receiver c on a.id=c.messageId  
	    and (c.receiverId in (select orgId from sys_user_org where userId = #{receiverId}) or c.receiverId =#{receiverId}) 
	    where 1=1
		<if test="@Ognl@isNotEmpty(subject)"> AND a.subject LIKE '%${subject}%' </if>
        <if test="@Ognl@isNotEmpty(messageType)"> AND a.messageType LIKE '%${messageType}%' </if>
        group by a.id)
        AND d.id=b.messageId AND b.receiverId=#{receiverId}
        <if test="@Ognl@isNotEmpty(beginreceiveTime)"> AND b.receiveTime>=#{beginreceiveTime,jdbcType=TIMESTAMP}</if>
		<if test="@Ognl@isNotEmpty(endreceiveTime)"> AND b.receiveTime &lt;=#{endreceiveTime,jdbcType=TIMESTAMP}</if>
        <if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by d.id desc
		</if>
    </select>

    <select id="getNotReadMsgByUserId" resultType="org.sz.platform.model.system.MessageSend">
    	select a.id, subject, userName, messageType, content, sendTime, canReply, receiverName
		from sys_msg_send a, (    
	    select d.id 
		from sys_msg_receiver a, sys_msg_send d
		where (a.receiverId in (select orgId from sys_user_org where userId = #{receiverId}) 
		or a.receiverId =#{receiverId})
		and a.messageId not in (select b.messageId from sys_msg_read b 
	    where a.messageId=b.messageId and b.receiverId =#{receiverId})
	    and a.messageId = d.id
	    group by d.id) b where a.id = b.id 
	    order by a.sendTime desc
	</select>
	
    <select id="getNotReadMsgFirst" resultType="org.sz.platform.model.system.MessageSend">
    	select a.id, subject, userName, messageType, content, sendTime, canReply, receiverName
		from sys_msg_send a, (    
	    select d.id 
		from sys_msg_receiver a, sys_msg_send d
		where (a.receiverId in (select orgId from sys_user_org where userId = #{receiverId}) 
		or a.receiverId =#{receiverId})
		and a.messageId not in (select b.messageId from sys_msg_read b 
	    where a.messageId=b.messageId and b.receiverId =#{receiverId})
	    and a.messageId = d.id
	    group by d.id) b where a.id = b.id 
	    order by a.sendTime desc limit 0, 1
	</select>
	
    <select id="getNotReadMsgCount" resultType="int">
    	select count(*)
		from sys_msg_send a , (    
	    select d.id 
		from sys_msg_receiver a, sys_msg_send d
		where (a.receiverId in (select orgId from sys_user_org where userId = #{receiverId}) 
		or a.receiverId =#{receiverId})
		and a.messageId not in (select b.messageId from sys_msg_read b 
	    where a.messageId=b.messageId and b.receiverId =#{receiverId})
	    and a.messageId = d.id
	    group by d.id) b where a.id = b.id 
	</select>
	
	<!-- start dialect  -->
	
	<select id="getNotReadMsg_oracle" resultType="org.sz.platform.model.system.MessageSend" parameterType="java.lang.Long">
		select id, subject, userName, messageType, content, sendTime, canReply, receiverName
		from sys_msg_send where id = ( 
    	select id from (
		select d.id  
		from sys_msg_receiver a, sys_msg_send d
		where (a.receiverId in (select orgId from sys_user_org where userId = #{receiverId}) 
		or a.receiverId = #{receiverId})
		and a.messageId not in (select b.messageId from sys_msg_read b 
	    where a.messageId=b.messageId and b.receiverId = #{receiverId})
	    and a.messageId = d.id group by d.id,d.sendTime order by d.sendTime desc ) 
	    where <![CDATA[rownum <= 1 ]]>)
	</select>
	
	<select id="getNotReadMsg_mysql" resultType="org.sz.platform.model.system.MessageSend" parameterType="java.lang.Long">
		select id, subject, userName, messageType, content, sendTime, canReply, receiverName
		from sys_msg_send where id = ( 
    	select id from (
		select d.id  
		from sys_msg_receiver a, sys_msg_send d
		where (a.receiverId in (select orgId from sys_user_org where userId = #{receiverId}) 
		or a.receiverId = #{receiverId})
		and a.messageId not in (select b.messageId from sys_msg_read b 
	    where a.messageId=b.messageId and b.receiverId = #{receiverId})
	    and a.messageId = d.id group by d.id,d.sendTime order by d.sendTime desc ) 
	    where limit 1)
	</select>
	
	<select id="getNotReadMsg_db2" resultType="org.sz.platform.model.system.MessageSend" parameterType="java.lang.Long">
	    select id, subject, userName, messageType, content, sendTime, canReply, receiverName
		from sys_msg_send where id = ( 
    	select id from (
		select d.id  
		from sys_msg_receiver a, sys_msg_send d
		where (a.receiverId in (select orgId from sys_user_org where userId = #{receiverId}) 
		or a.receiverId = #{receiverId})
		and a.messageId not in (select b.messageId from sys_msg_read b 
	    where a.messageId=b.messageId and b.receiverId = #{receiverId})
	    and a.messageId = d.id group by d.id,d.sendTime order by d.sendTime desc ) 
	    where FETCH FIRST 1 ROWS ONLY)
	</select>
	
	<select id="getNotReadMsg_sqlserver" resultType="org.sz.platform.model.system.MessageSend" parameterType="java.lang.Long">
		select id, subject, userName, messageType, content, sendTime, canReply, receiverName
		from sys_msg_send where id = (
		select top 1 d.id 
		from sys_msg_receiver a, sys_msg_send d
		where (a.receiverId in (select orgId from sys_user_org where userId = #{receiverId}) 
		or a.receiverId = #{receiverId})
		and a.messageId not in (select b.messageId from sys_msg_read b 
	    where a.messageId=b.messageId and b.receiverId = #{receiverId})
	    and a.messageId = d.id group by d.id,d.sendTime order by d.sendTime desc )
	</select>
	
	<!-- end dialect  -->
	
</mapper>
