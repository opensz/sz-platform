<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="org.sz.platform.system.model.Message">
	<resultMap id="Message" type="org.sz.platform.system.model.Message">
		<id property="messageId" column="messageId" />
		<result property="subject" column="subject" />
		<result property="receiver" column="receiver" />
		<result property="copyTo" column="copyTo" />
		<result property="bcc" column="bcc" />
		<result property="fromUser" column="fromUser" />
		<result property="templateId" column="templateId" />
		<result property="messageType" column="messageType" />
	</resultMap>
	<resultMap id="ExtMessage" extends="Message" type="org.sz.platform.system.model.Message">
		<association property="sysTemplate" column="templateId" javaType="org.sz.platform.system.model.SysTemplate">
			<result property="content" column="mesContent" />
		</association>
	</resultMap>	
	<sql id="columns">
		messageId,subject,receiver,copyTo,bcc,fromUser,templateId,messageType
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(messageId)"> AND messageId  =#{messageId} </if>
			<if test="@Ognl@isNotEmpty(subject)"> AND subject  LIKE '%${subject}%'  </if>
			<if test="@Ognl@isNotEmpty(receiver)"> AND receiver  LIKE '%${receiver}%'  </if>
			<if test="@Ognl@isNotEmpty(copyTo)"> AND copyTo  LIKE '%${copyTo}%'  </if>
			<if test="@Ognl@isNotEmpty(bcc)"> AND bcc  LIKE '%${bcc}%'  </if>
			<if test="@Ognl@isNotEmpty(fromUser)"> AND fromUser  LIKE '%${fromUser}%'  </if>
			<if test="@Ognl@isNotEmpty(templateId)"> AND templateId  =#{templateId} </if>
			<if test="@Ognl@isNotEmpty(messageType)"> AND messageType  =#{messageType} </if>
		</where>
	</sql>

	<insert id="add" parameterType="org.sz.platform.system.model.Message">
		INSERT INTO sys_message
		(<include refid="columns"/>)
		VALUES
		(#{messageId,jdbcType=NUMERIC}, #{subject,jdbcType=VARCHAR}, #{receiver,jdbcType=VARCHAR}, #{copyTo,jdbcType=VARCHAR}, #{bcc,jdbcType=VARCHAR}, #{fromUser,jdbcType=VARCHAR}, #{templateId,jdbcType=NUMERIC}, #{messageType,jdbcType=NUMERIC})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM SYS_MESSAGE 
		WHERE
		messageId=#{messageId}
	</delete>
	
	<update id="update" parameterType="org.sz.platform.system.model.Message">
		UPDATE sys_message SET
		subject=#{subject,jdbcType=VARCHAR} , 
		receiver=#{receiver,jdbcType=VARCHAR} , 
		copyTo=#{copyTo,jdbcType=VARCHAR} , 
		bcc=#{bcc,jdbcType=VARCHAR} , 
		fromUser=#{fromUser,jdbcType=VARCHAR} , 
		templateId=#{templateId,jdbcType=NUMERIC} , 
		messageType=#{messageType,jdbcType=NUMERIC} 
		WHERE
		messageId=#{messageId}
	</update>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="Message">
		SELECT <include refid="columns"/>
		FROM SYS_MESSAGE
		WHERE
		messageId=#{messageId}
	</select>
	
	<select id="getAll" resultMap="Message">
		SELECT <include refid="columns"/>
		FROM SYS_MESSAGE   
		<include refid="dynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by messageId  desc
		</if>
	</select>
	<select id="getListByActDefIdNodeId" resultMap="ExtMessage">
		SELECT m.messageId,m.subject,m.receiver,m.copyTo,m.templateId,m.bcc,m.fromUser,m.messageType
		,n.actDefId,n.nodeId,t.content mesContent 
		from BPM_NODE_MESSAGE N 
		join SYS_MESSAGE M on n.messageId=m.messageId
		join SYS_TEMPLATE t on m.templateId=t.templateId
		where n.actDefId=#{actDefId} and n.nodeId=#{nodeId}
	</select>
	<select id="getByActDefId" resultMap="Message">
		SELECT m.*  
		from BPM_NODE_MESSAGE N 
		join SYS_MESSAGE M on n.messageId=m.messageId
		<where>
		<if test="@Ognl@isNotEmpty(actDefId)">
		  and n.actDefId=#{actDefId}
		</if>	
		</where>	 
	</select>
	<delete id="delByMessageId">
		DELETE from SYS_MESSAGE a 
		where a.messageId in 
		(select b.messageid from bpm_node_message b 
		where b.actdefid=#{actdefId}
		 and b.nodeid=#{nodeId})
	</delete>
</mapper>
