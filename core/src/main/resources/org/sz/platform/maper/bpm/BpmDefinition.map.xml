<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="org.sz.platform.bpm.model.flow.BpmDefinition">
	<resultMap id="BpmDefinition" type="org.sz.platform.bpm.model.flow.BpmDefinition">
		<id property="defId" column="defId" jdbcType="NUMERIC"/>
		<result property="typeId" column="typeId" jdbcType="NUMERIC"/>
		<result property="businessType" column="businessType" jdbcType="VARCHAR"/>
		<result property="subject" column="subject" jdbcType="VARCHAR"/>
		<result property="defKey" column="defKey" jdbcType="VARCHAR"/>
		<result property="taskNameRule" column="taskNameRule" jdbcType="VARCHAR"/>
		<result property="descp" column="descp" jdbcType="VARCHAR"/>
		<result property="status" column="status" jdbcType="NUMERIC"/>
		
		<result property="actDeployId" column="actDeployId" jdbcType="NUMERIC"/>
		<result property="actDefKey" column="actDefKey" jdbcType="VARCHAR"/>
		<result property="actDefId" column="actDefId" jdbcType="VARCHAR"/>
		<result property="createtime" column="createtime" jdbcType="TIMESTAMP"/>
		<result property="updatetime" column="updatetime" jdbcType="TIMESTAMP"/>
		<result property="createBy" column="createBy" jdbcType="NUMERIC"/>
		<result property="updateBy" column="updateBy" jdbcType="NUMERIC"/>
		<result property="reason" column="reason" jdbcType="VARCHAR"/>
		<result property="versionNo" column="versionNo" jdbcType="NUMERIC"/>
		<result property="parentDefId" column="parentDefId" jdbcType="NUMERIC"/>
		<result property="isMain" column="isMain" jdbcType="NUMERIC"/>
		<result property="toFirstNode" column="toFirstNode" jdbcType="NUMERIC" />
		<result property="needStartForm" column="needStartForm" jdbcType="NUMERIC" />
		<result property="isIso" column="ISISO" jdbcType="NUMERIC" />
		
	</resultMap>	
	
	<sql id="columns">
		defId,typeId,businessType,subject,defKey,taskNameRule,descp,status,defXml,actDeployId,actDefKey,actDefId,createtime,updatetime,createBy,updateBy,reason,versionNo,parentDefId,isMain,toFirstNode,needStartForm,isIso
	</sql>
	

	<sql id="dynamicWhere2">
		<where>
			 bpm.isMain=1
			<if test="@Ognl@isNotEmpty(subject)"> AND bpm.subject  LIKE '%${subject}%'  </if>
			<if test="@Ognl@isNotEmpty(typeName)"> AND type.typeName LIKE '%${typeName}' </if>
			<if test="@Ognl@isNotEmpty(nodePath)"> AND type.nodePath LIKE '${nodePath}%' </if>
			<if test="@Ognl@isNotEmpty(defKey)"> AND bpm.defKey  LIKE '%${defKey}%'  </if>
			<if test="@Ognl@isNotEmpty(taskNameRule)"> AND bpm.taskNameRule  LIKE '%${taskNameRule}%'  </if>
			<if test="@Ognl@isNotEmpty(descp)"> AND bpm.descp  LIKE '%${descp}%'  </if>
			<if test="@Ognl@isNotEmpty(createtime)"> AND bpm.createtime  >=#{createtime,jdbcType=DATE} </if>
			<if test="@Ognl@isNotEmpty(endcreatetime)" > AND bpm.createtime &lt;=#{endcreatetime,jdbcType=DATE} </if>
			<if test="@Ognl@isNotEmpty(status)"> AND bpm.status  =#{status} </if>
		
		</where>
	</sql>

	<insert id="add" parameterType="org.sz.platform.bpm.model.flow.BpmDefinition">
		INSERT INTO bpm_definition
		(<include refid="columns"/>)
		VALUES
		(#{defId,jdbcType=NUMERIC}, #{typeId,jdbcType=NUMERIC}, #{businessType,jdbcType=VARCHAR}, #{subject,jdbcType=VARCHAR}, #{defKey,jdbcType=VARCHAR}, 
		#{taskNameRule,jdbcType=VARCHAR}, #{descp,jdbcType=VARCHAR}, #{status,jdbcType=NUMERIC}, #{defXml,jdbcType=CLOB},
		 #{actDeployId,jdbcType=NUMERIC}, #{actDefKey,jdbcType=VARCHAR}, #{actDefId,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP},
		  #{updatetime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=NUMERIC}, #{updateBy,jdbcType=NUMERIC}, #{reason,jdbcType=VARCHAR},
		   #{versionNo,jdbcType=NUMERIC}, #{parentDefId,jdbcType=NUMERIC}, #{isMain,jdbcType=NUMERIC},  #{toFirstNode,jdbcType=NUMERIC},#{needStartForm,jdbcType=NUMERIC},#{isIso,jdbcType=NUMERIC})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM BPM_DEFINITION 
		WHERE
		defId=#{defId}
	</delete>
	
	<update id="updateIsMain" parameterType="java.util.Map">
		UPDATE BPM_DEFINITION SET isMain=#{isMain}
		where defId=${defId}
	</update>
	<update id="saveParam" parameterType="org.sz.platform.bpm.model.flow.BpmDefinition">
		UPDATE BPM_DEFINITION SET taskNameRule=#{taskNameRule,jdbcType=VARCHAR},
		businessType=#{businessType,jdbcType=VARCHAR},
		toFirstNode=#{toFirstNode,jdbcType=NUMERIC},
		needStartForm=#{needStartForm,jdbcType=NUMERIC}
		where defId=${defId}
	</update>
	
	<update id="update" parameterType="org.sz.platform.bpm.model.flow.BpmDefinition">
		UPDATE bpm_definition SET
		typeId=#{typeId,jdbcType=NUMERIC} , 
		businessType=#{businessType,jdbcType=VARCHAR} , 
		subject=#{subject,jdbcType=VARCHAR} , 
		defKey=#{defKey,jdbcType=VARCHAR} , 	
		taskNameRule=#{taskNameRule,jdbcType=VARCHAR} , 
		descp=#{descp,jdbcType=VARCHAR} , 
		status=#{status,jdbcType=NUMERIC} , 
		defXml=#{defXml,jdbcType=CLOB} , 
		actDeployId=#{actDeployId,jdbcType=NUMERIC} , 
		actDefKey=#{actDefKey,jdbcType=VARCHAR} , 
		actDefId=#{actDefId,jdbcType=VARCHAR} , 
		createtime=#{createtime,jdbcType=TIMESTAMP} , 
		updatetime=#{updatetime,jdbcType=TIMESTAMP} , 
		createBy=#{createBy,jdbcType=NUMERIC} , 
		updateBy=#{updateBy,jdbcType=NUMERIC} , 
		reason=#{reason,jdbcType=VARCHAR} , 
		versionNo=#{versionNo,jdbcType=NUMERIC} , 
		parentDefId=#{parentDefId,jdbcType=NUMERIC} , 
		isMain=#{isMain,jdbcType=NUMERIC} , 
		toFirstNode=#{toFirstNode,jdbcType=NUMERIC},
		needStartForm=#{needStartForm,jdbcType=NUMERIC}
		WHERE
		defId=#{defId}
	</update>
	
	<update id="updateSubVersions" parameterType="java.util.Map">
		UPDATE BPM_DEFINITION SET 
		parentDefId=#{parentDefId},
		isMain=0
		where defKey=#{defKey}
	</update>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="BpmDefinition">
		SELECT <include refid="columns"/>
		FROM BPM_DEFINITION
		WHERE
		defId=#{defId}
	</select>
	
	<select id="getAllForAdmin" resultMap="BpmDefinition">
		select bpm.*,type.typeName typeName from BPM_DEFINITION bpm  
		left join SYS_GL_TYPE type on bpm.typeId=type.typeId 
		<include refid="dynamicWhere2"/> 
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by defId desc
		</if>
	</select>
	
	<select id="getAll" resultMap="BpmDefinition">
		select bpm.*,type.typeName typeName from BPM_DEFINITION bpm  
		left join SYS_GL_TYPE type on bpm.typeId=type.typeId 
		<include refid="dynamicWhere2"/> 
		and bpm.defId in 
		(
			select distinct bd.defId from BPM_DEFINITION bd
			inner join bpm_def_rtdl rtdl 
			on rtdl.defId = bd.defId and (
				rtdl.roleId in (${roleId}) 
				or rtdl.userId = ${userId} 
				or rtdl.orgId in (${orgId})
			)
		) order by updatetime

	</select>
	
	<select id="getBpmDefinitions" resultMap="BpmDefinition">
		select * from BPM_DEFINITION bpm  
		where bpm.actdeployid is not null and bpm.ismain=1
	</select>
	
	<select id="getByParentDefId" parameterType="java.lang.Long" resultMap="BpmDefinition">
		select a.*,b.typeName from BPM_DEFINITION a,sys_gl_type b
		where a.typeId=b.typeId and a.parentDefId=#{parentDefId}
		order by a.versionNo desc
	</select>
	
	<select id="getByParentDefIdIsMain" parameterType="java.util.Map" resultMap="BpmDefinition">
		select a.*,b.typeName from BPM_DEFINITION a,sys_gl_type b
		where a.typeId=b.typeId and a.parentDefId=#{parentDefId} and a.isMain=#{isMain}
		order by a.versionNo desc
	</select>
	
	<select id="getByActDefId" parameterType="java.lang.String" resultMap="BpmDefinition">
		select * from BPM_DEFINITION where actDefId=#{actDefId}
	</select>
	
	<select id="getByDefKey" parameterType="java.lang.String" resultMap="BpmDefinition">
		select * from BPM_DEFINITION where defKey=#{defKey}
	</select>
	
	<select id="isActDefKeyExists" parameterType="java.lang.String" resultType="int">
		select count(*) amount from BPM_DEFINITION where actDefKey=#{actDefKey}
	</select>
	

	
	<select id="getByActDefKeyIsMain" parameterType="java.lang.String" resultMap="BpmDefinition">
		select * from BPM_DEFINITION where actDefKey=#{actDefKey} and isMain=#{isMain}
	</select>
	
	<select id="getByTypeId" parameterType="java.lang.String" resultMap="BpmDefinition">
		select * from BPM_DEFINITION where typeId=#{typeId} and isMain=1
	</select>
	<delete id="delByDeployId" parameterType="java.lang.Long">
		DELETE FROM BPM_DEFINITION 
		WHERE
		actDeployId=#{actDeployId}
	</delete>
	<select id="getByDeployId"  resultMap="BpmDefinition">
		select * from BPM_DEFINITION where actDeployId=#{actDeployId}
	</select>
	
	
	<sql id="dynamicWhereGetByUser">
		and def.isMain=1
		<if test="@Ognl@isNotEmpty(subject)"> AND def.subject  LIKE '%${subject}%'  </if>
		<if test="@Ognl@isNotEmpty(defKey)"> AND def.defKey  LIKE '%${defKey}%'  </if>
		<if test="@Ognl@isNotEmpty(taskNameRule)"> AND def.taskNameRule  LIKE '%${taskNameRule}%'  </if>
		<if test="@Ognl@isNotEmpty(descp)"> AND def.descp  LIKE '%${descp}%'  </if>
		<if test="@Ognl@isNotEmpty(createtime)"> AND def.createtime  >=#{createtime,jdbcType=DATE} </if>
		<if test="@Ognl@isNotEmpty(endcreatetime)" > AND def.createtime &lt;=#{endcreatetime,jdbcType=DATE} </if>
		<if test="@Ognl@isNotEmpty(status)"> AND def.status  =#{status} </if>
	</sql>
	<!-- 按用户授权过滤用户的流程 -->
	<select id="getByUserIdFilter" resultMap="BpmDefinition">
		select distinct 
		def.defId,def.typeId,def.businessType,def.subject,def.defKey,def.descp,
		def.status,def.actDeployId,def.actDefKey,def.actDefId,def.createtime,def.updatetime,
		def.createBy,def.updateBy,def.reason,def.versionNo,def.parentDefId,def.isMain,def.toFirstNode,
		type.typeName typeName from BPM_DEFINITION def left join SYS_GL_TYPE type on type.typeId=def.typeId
 		where (
			def.defId in(
				select distinct rig.defId from BPM_DEF_RIGHTS rig where rig.searchType=0
				and (
					(rig.ownerId = #{userId} and rig.rightType=1)
		 			<if test="@Ognl@isNotEmpty(roleIds)">or (rig.ownerId in (${roleIds}) and rig.rightType=2)</if>
					<if test="@Ognl@isNotEmpty(orgIds)">or (rig.ownerId in (${orgIds}) and rig.rightType=3)</if>
				)
			)
			or def.typeId in (
				select distinct rs.flowTypeId from BPM_DEF_RIGHTS rs where rs.searchType=1 and ((rs.ownerId = #{userId} and rs.rightType=1)
	 			<if test="@Ognl@isNotEmpty(roleIds)">or (rs.ownerId in (${roleIds}) and rs.rightType=2)</if>
				<if test="@Ognl@isNotEmpty(orgIds)">or (rs.ownerId in (${orgIds}) and rs.rightType=3)</if>
				)
			)
			or
			(
			   not exists
			   (
			     select rs.* from BPM_DEF_RIGHTS rs where def.typeId=rs.flowTypeId and rs.searchType=1
			   )
			   and not exists
			   (
			   	 select rig.* from BPM_DEF_RIGHTS rig where def.defId=rig.defId and rig.searchtype=0
			   )
			)			
		)
		<if test="@Ognl@isNotEmpty(nodePath)">
			and type.nodePath like '${nodePath}%'  
		</if>
		<include refid="dynamicWhereGetByUser"/> 
	</select>
	
	<select id="getByUserId"  resultMap="BpmDefinition">
		
		<!--流程用户权限-->
		select def.*,type.typeName typeName from BPM_DEFINITION def
		left join SYS_GL_TYPE type on(type.typeId=def.typeId)
		
		
		,BPM_DEF_RIGHTS rig
		where 1=1
		and rig.searchType=0
		and def.defId=rig.defId
		<if test="@Ognl@isNotEmpty(userId)">and rig.ownerId = #{userId}</if>
		<if test="@Ognl@isNotEmpty(nodePath)">
			and type.nodePath like '${nodePath}%' 
		</if>
		
		<include refid="dynamicWhereGetByUser"/> 
		
		<!--流程角色权限-->
		union all
		select def.*,type.typeName typeName from BPM_DEFINITION def
		left join SYS_GL_TYPE type on(type.typeId=def.typeId)
		
		,BPM_DEF_RIGHTS rig
		, SYS_USER_ROLE role
		where 1=1
		and rig.searchType=0
		and def.defId=rig.defId
		and rig.ownerId= role.roleId
		<if test="@Ognl@isNotEmpty(userId)">and role.userId=#{userId}</if>
		<if test="@Ognl@isNotEmpty(nodePath)">
			and type.nodePath like '${nodePath}%' 
		</if>
		<include refid="dynamicWhereGetByUser"/> 
		
		<!--流程组织权限-->
		union all 
		select def.*,type.typeName typeName from BPM_DEFINITION def
		left join SYS_GL_TYPE type on(type.typeId=def.typeId)
		
		,BPM_DEF_RIGHTS rig
		,SYS_USER_ORG org
		where 1=1
		and rig.searchType=0
		and def.defId=rig.defId
		and rig.ownerId =org.orgId
		<if test="@Ognl@isNotEmpty(userId)">and org.userId=#{userId}</if>
		<if test="@Ognl@isNotEmpty(nodePath)">
			and type.nodePath like '${nodePath}%' 
		</if>
		<include refid="dynamicWhereGetByUser"/> 
		
		<!--分类用户权限-->
		union all
		select def.*,ty.typeName typeName from BPM_DEFINITION def
		left join SYS_GL_TYPE ty on(ty.typeId=def.typeId)
		,BPM_DEF_RIGHTS rig
		where 1=1
		and rig.searchType=1
        and rig.flowtypeid=ty.typeId
		
		<if test="@Ognl@isNotEmpty(nodePath)">
			and ty.nodePath like '${nodePath}%' 
		</if>
		<if test="@Ognl@isNotEmpty(userId)">and rig.ownerId =#{userId}</if>
		
		<include refid="dynamicWhereGetByUser"/> 
		
		<!--分类角色权限-->
		union all
		select def.*,ty.typeName typeName from BPM_DEFINITION def
		left join SYS_GL_TYPE ty on(ty.typeId=def.typeId)
		,BPM_DEF_RIGHTS rig, SYS_USER_ROLE role
		where 1=1
		and rig.searchType=1
        and rig.flowtypeid=ty.typeId
		
		and rig.ownerId= role.roleId
		
		<if test="@Ognl@isNotEmpty(nodePath)">
			and ty.nodePath like '${nodePath}%' 
		</if>
		<if test="@Ognl@isNotEmpty(userId)">and role.userId=#{userId}</if>
		
		<include refid="dynamicWhereGetByUser"/> 
		
		<!--分类组织权限-->
		union all
		select def.*,ty.typeName typeName from BPM_DEFINITION def
		left join SYS_GL_TYPE ty on(ty.typeId=def.typeId)
		,BPM_DEF_RIGHTS rig, SYS_USER_ORG org
		where 1=1
		and rig.searchType=1
        and rig.flowtypeid=ty.typeId
		
		and rig.ownerId =org.orgId
		
		<if test="@Ognl@isNotEmpty(nodePath)">
			and ty.nodePath like '${nodePath}%' 
		</if>
		<if test="@Ognl@isNotEmpty(userId)">and org.userId=#{userId}</if>
		
		<include refid="dynamicWhereGetByUser"/> 

	</select>

</mapper>
